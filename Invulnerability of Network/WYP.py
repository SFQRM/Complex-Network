# @author: SFQRM
# first edit date: 2019-10-21
# function:
#     雅可比迭代法求解方程组

import networkx as nx
import matplotlib.pyplot as plt
import numpy as np


# 从文件@filename中读取网络的adjacentMatrix，通过networkx的add_edges方法向对象G中添加边
def readNetwork(filename, N):
    fin = open(filename, 'r')                               # 读文件
    A_matrix = np.zeros((N, N), dtype=int)                  # 创建一个NxN的全零矩阵，数据类型为int型
    matrix_row = 0                                          # 定义矩阵的行，从第0行开始
    for line in fin.readlines():                            # 一次性读取所有行，并存储为字符串列表
        list = line.strip('\n').split(' ')                  # 处理逐行数据：strip表示把头尾的'\n'去掉，split表示以空格来分割行数据，
        # list = line.strip('\n').split('\t')
        A_matrix[matrix_row] = list[0:N]                    # list[0:8]表示列表的0~7列数据放到矩阵中的matrix_row行
        matrix_row += 1

    # print(martrix)
    rowCount = 1                                            # 行数初始化
    colCount = 1                                            # 列数初始化
    for line in A_matrix:
        for node in line:
            if node == 1:
                G.add_edge(rowCount, colCount)              # 节点间连一条边
            colCount += 1
        colCount = 1
        rowCount += 1

    # print(G.edges())
    return A_matrix


# 传入邻接矩阵计算连接概率矩阵
def getProbability(matrix):
    D_array = np.array(np.sum(matrix, axis=0))              # D_array: 由各个节点的度数组成的数组
    P_matrix = np.zeros((N, N), dtype=float)                # 创建一个NxN的全零矩阵，数据类型为float型
    # print(D_array)
    for i in range(N):
        for j in range(N):
            if matrix[i, j] == 1:
                P_matrix[i, j] = 1/D_array[i]               # 计算发送概率矩阵

    return P_matrix


# 求矩阵的行列式
def getDeterminant(matrix):
    det = np.linalg.det(matrix)
    return det


# 迭代计算
def iteration(p_matrix, w_vector, u_vector):
    # print(p_matrix)
    # print(w_vector)
    # print(u_vector)
    # print(np.dot(p_matrix, w_vector))
    result = np.dot(p_matrix, w_vector) + u_vector
    
    return result


def e():
    W = w(p,w,u)
    e = np.zeros((N, N), dtype=int)
    for i in range(N):
        for j in range(N):
            e[j, i] = p[i, j]*W[i]
            for t in range(N):
                e[j,i] = e[j,i]+a[i,t]*p[t,j]
    w = W.copy()
    return


if __name__ == '__main__':
    G = nx.Graph()                                           # G: 定义一个空的图结构
    dirPath = 'data/bridge node network.data'                # dirPath: 数据文件路径
    N = 8                                                    # N: 邻接矩阵的维度
    A_matrix = readNetwork(dirPath, N)                       # 从外部文件读取邻接矩阵
    # print(A_matrix)
    p = getProbability(A_matrix)                             # p: 发送概率矩阵
    # print(A_matrix[3, 1])
    print(p)
    # I = np.matrix(np.eye(p.shape[0]))                        # I:单位矩阵
    # p = p + I
    # print(p)
    # p_det = getDeterminant(p)                                # p_det: 矩阵p的行列式
    # print(p_det)
    w = np.array(np.zeros(N), dtype=float)                   # w: 初始化权重向量
    w = w.reshape(-1, 1)                                     # w: 将行向量变为列向量
    # print(w)
    u = np.ones(N, dtype=float)                              # u: 外部输入
    u = u.reshape(-1, 1)
    # print(u)
    # for k in range(3):
    #     w = iteration(p, w, u)
    #     print("i:",k)
    #     print(w)

    # print(w)
